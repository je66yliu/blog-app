{"version":3,"sources":["firebase/Firebase.js","components/Header.jsx","components/CreatePost.jsx","components/PostPreview.jsx","App.jsx","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","firestore","provider","GoogleAuthProvider","setCustomParameters","prompt","createNewUser","userAuth","additionalData","a","userRef","doc","uid","get","exists","displayName","email","createdAt","Date","set","isSubscribed","console","log","message","signInWithGoogle","signInWithPopup","Header","user","className","to","style","textDecoration","color","onClick","signOut","Tooltip","arrow","title","fontSize","aria-label","href","target","rel","CreatePost","handleChange","handleSubmit","handleReset","titleField","contentField","currentUser","onSubmit","e","preventDefault","TextField","id","label","onChange","type","name","value","margin","minWidth","variant","multiline","Button","trim","disabled","PostPreview","content","author","date","handleLike","currentUserID","likes","Object","keys","length","App","props","unsubscribeFromAuth","unsubscribeFromSnapshot","initialState","posts","currentPage","event","setState","state","postID","newPost","key","uuidv1","toString","split","slice","replace","alert","handlePageForward","handlePageBackward","handleSubscription","sub","like","postRef","postSnapshot","postData","data","updatedUserLikes","this","onAuthStateChanged","onSnapshot","snapshot","collection","allPosts","docs","map","Math","ceil","exact","path","backgroundColor","post","textTransform","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9fef96b2.chunk.js","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\n\nconst firebaseConfig = {\n    apiKey: process.env.REACT_APP_API_KEY,\n    authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n    databaseURL: process.env.REACT_APP_DATABASE_URL,\n    projectId: process.env.REACT_APP_PROJECT_ID,\n    storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n    messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\n    appId: process.env.REACT_APP_APP_ID,\n    measurementId: process.env.REACT_APP_MEASUREMENT_ID\n};\n\n\nfirebase.initializeApp(firebaseConfig);\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\n\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({prompt: 'select_account'});\n\n\nexport const createNewUser = async (userAuth, additionalData) => {\n    if (!userAuth) return;\n\n    const userRef = firestore.doc(`users/${userAuth.uid}`);\n    const snapShot = await userRef.get();\n\n    if (!snapShot.exists) {\n        const { displayName, email } = userAuth;\n        const createdAt = new Date();\n\n        try {\n            await userRef.set({\n                displayName,\n                email,\n                createdAt,\n                isSubscribed: false,\n                ...additionalData\n            });\n        } catch (err) {\n            console.log('Error creating user.', err.message);\n        }\n    }\n\n    return userRef;\n};\n\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\n\nexport default firebase;","import React from 'react';\nimport { auth } from '../firebase/Firebase';\nimport { signInWithGoogle } from '../firebase/Firebase';\nimport { Link } from 'react-router-dom';\nimport Tooltip from '@material-ui/core/Tooltip';\n\nconst Header = ({ user }) => (\n    <nav className=\"flex justify-end bb b--white-10 bg-dark-gray\">\n        <div className=\"flex-grow pa3 flex items-center\">\n            <div className=\"f6 link dib white dim mr3 mr4-ns pointer\">\n                {\n                    user ?\n                        <Link to={`${process.env.PUBLIC_URL}/`} style={{ textDecoration: 'none', color: 'white' }}>\n                            <div onClick={() => auth.signOut()}>Sign Out</div>\n                        </Link>\n                    :   <div onClick={signInWithGoogle}>Sign In</div>\n                }\n            </div>\n\n            {\n                user ? \n                    <div className=\"f6 dib white bg-animate hover-bg-white hover-black no-underline pv2 ph4 br-pill ba b--white-20 pointer\">Hi, {user.displayName}</div>\n                :   <Tooltip arrow title={<span style={{ fontSize: '12px' }}>Create a Google Account</span>} aria-label=\"signup\">\n                        <a className=\"f6 dib white bg-animate hover-bg-white hover-black no-underline pv2 ph4 br-pill ba b--white-20 pointer\" href=\"https://accounts.google.com/signup/v2/webcreateaccount?continue=https%3A%2F%2Faccounts.google.com%2FManageAccount&dsh=S470069364%3A1581635333339519&gmb=exp&biz=false&flowName=GlifWebSignIn&flowEntry=SignUp\" target=\"_blank\" rel=\"noopener noreferrer\">\n                            Sign Up\n                        </a>\n                    </Tooltip>\n            }\n\n        </div>\n    </nav>\n);\n\nexport default Header;\n","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport { Link } from 'react-router-dom';\n\n\nconst CreatePost = ({ handleChange, handleSubmit, handleReset, titleField, contentField, currentUser }) => (\n    <div>\n        <h1>Create a New Post</h1>\n        <form onSubmit={e => { e.preventDefault() }}>\n            <div className='db mt4'>\n                <TextField\n                    id=\"title\"\n                    label=\"Enter a Title\"\n                    onChange={handleChange}\n                    type=\"title\"\n                    name=\"titleField\"\n                    value={titleField}\n                    style={{\n                        margin: 10,\n                        minWidth: '50%'\n                    }}\n                    margin=\"dense\"\n                    variant=\"outlined\"\n                />\n            </div>\n            <div className='db'>\n                <TextField\n                    id=\"content\"\n                    label=\"What's on your mind?\"\n                    onChange={handleChange}\n                    type=\"content\"\n                    name=\"contentField\"\n                    value={contentField}\n                    style={{\n                        margin: 10,\n                        minWidth: '50%'\n                    }}\n                    margin=\"normal\"\n                    variant=\"outlined\"\n                    multiline\n                />\n            </div>\n\n            <div className='pa3 dib'>\n                <Link to={`${process.env.PUBLIC_URL}/`} style={{ textDecoration: 'none' }}>\n                    <Button variant='contained' type='reset' onClick={handleReset}>\n                        Cancel\n                    </Button>\n                </Link>\n            </div>\n            <div className='pa3 dib'>\n                <Button variant='contained' type='reset' onClick={handleReset} color='secondary'>\n                    Clear\n                </Button>\n            </div>\n            <div className='pa3 dib'>\n                {\n                    currentUser ?\n                        <Link to={`${process.env.PUBLIC_URL}/${titleField.trim() && contentField.trim() ? '' : 'newpost'}`} style={{ textDecoration: 'none' }}>\n                            <Button variant='contained' type='submit' onClick={handleSubmit} color='primary'>\n                                Post\n                            </Button>\n                        </Link>\n                    :   <Button variant='contained' type='submit' onClick={handleSubmit} color='primary' disabled>\n                        Post\n                        </Button>\n                }\n            </div>\n        </form>\n    </div>\n);\n\nexport default CreatePost;","import React from 'react';\nimport FavoriteBorderIcon from '@material-ui/icons/FavoriteBorder';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport './PostPreview.css';\n\nconst PostPreview = ({ id, title, content, author, date, handleLike, currentUserID, likes }) => (\n    <article className=\"pv3 bb b--black-10 ph3 ph0-l\">\n        <div className=\"flex flex-column flex-row-ns\">\n            <div className=\"tl\">\n                <h1 className=\"f3 athelas mt0 lh-title\">\n                    {title}\n                </h1>\n                <p className=\"f5 f4-l lh-copy athelas\">\n                    {content}\n                </p>\n            </div>\n        </div>\n        <p className=\"tl f6 lh-copy gray mv2\">By <span className='fw7'>{author}</span></p>\n        <time className=\"tl f6 db gray\">{date}</time>\n        <div className='tl mt3'>\n            {\n                likes[currentUserID] ?\n                    <FavoriteIcon className={`v-mid pointer ${likes[currentUserID] ? 'heart' : ''}`} style={{ color: '#ed4956' }} onClick={() => handleLike(false, id)} />\n                :   <FavoriteBorderIcon className='v-mid pointer' onClick={() => handleLike(true, id)} />\n            }\n            <span className='v-mid'>{`• ${Object.keys(likes).length} Like${Object.keys(likes).length === 1 ? '' : 's'}`}</span>\n        </div>\n    </article>\n);\n\nexport default PostPreview;\n","import React, { Component } from 'react';\nimport './App.css';\n\nimport Header from './components/Header';\nimport { auth, createNewUser } from './firebase/Firebase';\nimport CreatePost from './components/CreatePost';\nimport PostPreview from './components/PostPreview';\nimport uuidv1 from 'uuid/v1';\nimport { firestore } from './firebase/Firebase';\nimport ArrowForwardIcon from '@material-ui/icons/ArrowForward';\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\nimport AddIcon from '@material-ui/icons/Add';\nimport NotificationsActiveIcon from '@material-ui/icons/NotificationsActive';\nimport NotificationsOffIcon from '@material-ui/icons/NotificationsOff';\nimport Button from '@material-ui/core/Button';\nimport { Switch, Route, Link } from 'react-router-dom';\n\nclass App extends Component {\n\n    unsubscribeFromAuth = null;\n    unsubscribeFromSnapshot = null;\n\n    initialState = {\n        currentUser: null,\n        titleField: '',\n        contentField: '',\n        posts: [],\n        currentPage: 1\n    }\n\n\n\n    constructor(props) {\n        super(props);\n        this.state = this.initialState;\n    }\n\n    handleChange = event => {\n        const { name, value } = event.target;\n        this.setState({ [name]: value })\n    };\n\n    handleSubmit = () => {\n        const { titleField, contentField, currentUser, posts } = this.state;\n\n        if (!titleField.trim() || !contentField.trim()) {\n            alert('Title or content cannot be empty!');\n        } else {\n\n            const postID = 999999999 - posts.length;\n            const newPost = {\n                id: postID,\n                key: uuidv1(),\n                title: titleField,\n                content: contentField,\n                author: currentUser.displayName,\n                date: new Date().toString().split(':').slice(0, 2).toString().replace(',', ':'),\n                likes: {}\n            };\n    \n            this.handleReset();\n\n            firestore.doc(`posts/${postID}`).set(newPost);\n        }\n    }\n\n    handleReset = () => {\n        this.setState({\n            titleField: '',\n            contentField: ''\n        });\n    }\n\n    handlePageForward = () => {\n        this.setState(state => ({\n            currentPage: state.currentPage + 1\n        }));\n    }\n\n    handlePageBackward = () => {\n        this.setState(state => ({\n            currentPage: state.currentPage - 1\n        }));\n    }\n\n    handleSubscription = async sub => {\n        const userRef = firestore.doc(`users/${this.state.currentUser.id}`);\n\n        try {\n            await userRef.set({ ...this.state.currentUser, isSubscribed: sub });\n        } catch (err) {\n            console.log('Error handling subscription.', err.message);\n        }\n    }\n\n    handleLike = async (like, postID) => {\n        const { currentUser } = this.state;\n\n        if (!currentUser) {\n            alert('Please sign in to like this post.');\n            return;\n        }\n\n        const postRef = firestore.doc(`posts/${postID}`);\n        const postSnapshot = await postRef.get();\n        const postData = postSnapshot.data();\n\n        try {\n            if (like) {\n                const updatedUserLikes = { ...postData.likes, [currentUser.id]: like };\n                await postRef.set({ ...postData, likes: updatedUserLikes });\n            } else {\n                delete postData.likes[currentUser.id];\n                await postRef.set({ ...postData, likes: postData.likes });\n            }\n        } catch (err) {\n            console.log('Error handling like.', err.message);\n        }\n    }\n\n\n    componentDidMount() {\n        this.unsubscribeFromAuth = auth.onAuthStateChanged(async userAuth => {\n            if (userAuth) {\n                const userRef = await createNewUser(userAuth);\n\n                userRef.onSnapshot(snapshot => {\n                    this.setState({ currentUser: {\n                        id: snapshot.id,\n                        ...snapshot.data()\n                    }});\n                })\n            } else {\n                this.setState({ currentUser: null });\n            }\n        });\n\n        const postRef = firestore.collection('posts');\n        this.unsubscribeFromSnapshot = postRef.onSnapshot(snapshot => {\n            const allPosts = snapshot.docs.map(doc => doc.data());\n            this.setState({ posts: allPosts });\n\n            if (this.state.currentPage > 1 && this.state.currentPage > Math.ceil(allPosts.length / 5)) {\n                this.setState({ currentPage: Math.ceil(allPosts.length / 5) });\n            }\n        });\n    }\n\n    componentWillUnmount() {\n        this.unsubscribeFromAuth();\n        this.unsubscribeFromSnapshot();\n    }\n\n\n    render() {\n        const { currentUser, posts, currentPage } = this.state;\n\n        return (\n            <div className=\"App\">\n                <Header user={this.state.currentUser} />\n                <Switch>\n                    <Route exact path={`${process.env.PUBLIC_URL}/`}>\n                        <section className=\"mw7 center\">\n                            <h1 className=\"athelas ph3 ph0-l\">News Feed</h1>\n                            \n                            {\n                                currentUser ?\n                                    <div>\n                                        <div className='mh3 dib'>\n                                            <Link to={`${process.env.PUBLIC_URL}/newpost`} style={{ textDecoration: 'none' }}>\n                                                <Button variant='contained' style={{ backgroundColor: '#1777f2', color: 'white' }}><AddIcon /><span>New Post</span></Button>\n                                            </Link>\n                                        </div>\n                                        {\n                                            currentUser.isSubscribed ? \n                                                <div className='mh3 dib'>\n                                                    <Button variant='contained' onClick={() => this.handleSubscription(false)}><NotificationsOffIcon /><span>Unsubscribe</span></Button>\n                                                </div>\n                                            :   <div className='mh3 dib'>\n                                                    <Button variant='contained' onClick={() => this.handleSubscription(true)} style={{ backgroundColor: '#f90300', color: 'white' }}><NotificationsActiveIcon /><span>Subscribe</span></Button>\n                                                </div>\n                                        }\n                                    </div>\n                                :   null\n                            }\n\n                            {\n                                posts.length ?\n                                    <div>\n                                        {posts.slice((currentPage - 1) * 5, currentPage * 5).map(post => (<PostPreview {...post} currentUserID={currentUser ? currentUser.id : null} handleLike={this.handleLike} />))}\n                                        <div className='ma4'>\n                                            <Button onClick={this.handlePageBackward} variant='contained' disabled={currentPage === 1}><ArrowBackIcon /></Button>\n                                                <span className='mh3'>{`Page ${currentPage} of ${Math.ceil(posts.length / 5)}`}</span>\n                                            <Button onClick={this.handlePageForward} variant='contained' disabled={currentPage === Math.ceil(posts.length / 5)}><ArrowForwardIcon /></Button>\n                                        </div>\n                                        <div className='ma3'>\n                                            <Link to={`${process.env.PUBLIC_URL}/all`} style={{ textDecoration: 'none' }}>\n                                                <Button style={{ textTransform: 'none' }} variant='outlined'>View All Posts</Button>\n                                            </Link>\n                                        </div>\n                                    </div>\n                                :   <h3 className='fw4'>No posts yet!</h3>\n                            }\n                        </section>\n                    </Route>\n\n                    <Route path={`${process.env.PUBLIC_URL}/newpost`}>\n                        <CreatePost handleChange={this.handleChange} handleSubmit={this.handleSubmit} handleReset={this.handleReset} {...this.state} />\n                    </Route>\n\n                    <Route path={`${process.env.PUBLIC_URL}/all`}>\n                        <section className=\"mw7 center\">\n                            <h1 className=\"athelas ph3 ph0-l\">All Posts</h1>\n                            {\n                                posts.length ?\n                                    <div>\n                                        {posts.map(post => (<PostPreview {...post} currentUserID={currentUser ? currentUser.id : null} handleLike={this.handleLike} />))}\n                                        <div className='ma3'>\n                                            <Link to={`${process.env.PUBLIC_URL}/`} style={{ textDecoration: 'none' }}>\n                                                <Button style={{ textTransform: 'none' }} variant='outlined'>Back to News Feed</Button>\n                                            </Link>\n                                        </div>\n                                    </div>\n                                :   <h3 className='fw4'>No posts yet!</h3>\n                            }\n                        </section>\n                    </Route>\n                </Switch>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { BrowserRouter } from 'react-router-dom';\nimport 'tachyons';\n\nReactDOM.render(\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>,\n    document.getElementById('root')\n);\n\n// // cron code\n// const cron = require(\"node-cron\");\n// const nodeMailer = require(\"nodemailer\");\n\n// let testAccount = nodemailer.createTestAccount();\n\n\n// let transporter = nodeMailer.createTransport({\n//     host: 'gmail',\n//     auth: {\n//     user: 'blogpost.mig688.jl59683@gmail.com',\n//     pass: 'm@ster21'\n//     }\n// });\n\n// // send email on 17th hour CST\n// cron.schedule(\"0 17 * * *\", function () {\n//     if(hasUpdated){\n//         hasUpdated = false;\n//         for(i = 0; i < users.length; i++){\n//             if(users[i].subscribed){\n//                 const mailOptions = {\n//                     from: 'blogpost.mig688.jl59683@gmail.com', // sender address\n//                     to: users[i].email,// list of receivers\n//                     subject: 'Daily Blogpost Update', // Subject line\n//                     text: '',// plain text body\n//                     html: ''// html body\n//                 };\n    \n//                 transporter.sendMail(mailOptions, function (error, info) {\n//                     console.log(info.messageId);\n//                     if (err) {\n//                         console.log(err);\n//                     }\n//                 });\n//             }\n//         }\n//     }\n// }, null, true, 'America/Chicago');\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}